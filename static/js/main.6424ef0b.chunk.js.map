{"version":3,"sources":["components/landingpage.js","components/aboutme.js","components/contact.js","components/project.js","components/resume.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Landing","react_default","a","createElement","Component","About","Contact","Project","Resume","Main","react_router","exact","path","component","LandingPage","AboutMe","App","className","lib","title","scroll","react_router_dom","to","main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"0MAUeA,mLANb,OACCC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,kCAHcC,aCQPC,mLANb,OACCJ,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,mCAHYC,aCQLE,mLANb,OACCL,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,kCAHcC,aCQPG,mLANb,OACCN,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,kCAHcC,aCQPI,mLANb,OACCP,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,iCAHaC,aCoBNK,EAVF,kBACZR,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACCT,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAO,IAAIC,UAAaC,IACrCb,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOE,KAAO,WAAWC,UAAaE,IACtCd,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOE,KAAO,WAAWC,UAAaP,IACtCL,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOE,KAAO,WAAWC,UAAaN,IACtCN,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOE,KAAO,UAAUC,UAAaL,cCmBxBQ,mLA7BX,OACEf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,oBACXhB,EAAAC,EAAAC,cAACe,EAAA,OAAD,KACAjB,EAAAC,EAAAC,cAACe,EAAA,OAAD,CAAQC,MAAM,mBAAmBC,QAAM,GACrCnB,EAAAC,EAAAC,cAACe,EAAA,WAAD,KACIjB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,WAAT,UACArB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,YAAT,WACArB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,YAAT,WACArB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,YAAT,aAGNrB,EAAAC,EAAAC,cAACe,EAAA,OAAD,CAAQC,MAAM,SACVlB,EAAAC,EAAAC,cAACe,EAAA,WAAD,KACIjB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,WAAT,UACArB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,YAAT,WACArB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,YAAT,WACArB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,YAAT,aAGRrB,EAAAC,EAAAC,cAACe,EAAA,QAAD,KACIjB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,iBACfhB,EAAAC,EAAAC,cAACoB,EAAD,gBAvBInB,aCMEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,yECNNC,IAASC,OACR7B,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACDpB,EAAAC,EAAAC,cAAC4B,EAAD,OAEGC,SAASC,eAAe","file":"static/js/main.6424ef0b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Landing extends Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div><h1>Landing Page</h1></div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Landing;","import React, { Component } from 'react';\r\n\r\nclass About extends Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div><h1>About Me Page</h1></div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default About;","import React, { Component } from 'react';\r\n\r\nclass Contact extends Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div><h1>Contact Page</h1></div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Contact;","import React, { Component } from 'react';\r\n\r\nclass Project extends Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div><h1>Project Page</h1></div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Project;","import React, { Component } from 'react';\r\n\r\nclass Resume extends Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div><h1>Resume Page</h1></div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Resume;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport LandingPage from './landingpage';\r\nimport AboutMe from './aboutme';\r\nimport Contact from './contact';\r\nimport Project from './project';\r\nimport Resume from './resume';\r\n\r\n\r\n\r\n\r\nconst Main = () => (\r\n\t<Switch>\r\n\t <Route exact path = \"/\" component = {LandingPage} />\r\n\t <Route path = \"/aboutme\" component = {AboutMe} />\r\n\t <Route path = \"/contact\" component = {Contact} />\r\n\t <Route path = \"/project\" component = {Project} />\r\n\t <Route path = \"/resume\" component = {Resume} />\r\n\t</Switch>\r\n)\r\n\r\nexport default Main;","import React, { Component} from 'react';\nimport './App.css';\nimport { Layout, Header, Navigation, Drawer, Content } from 'react-mdl';\nimport Main from './components/main';\nimport { Link } from 'react-router-dom';\n\nclass App extends Component{\n  render(){\n    return (\n      <div className=\"demo-big-content\">\n          <Layout>\n          <Header title=\"Material Matters\" scroll>\n            <Navigation>\n                <Link to=\"/resume\">Resume</Link>\n                <Link to=\"/aboutme\">AboutMe</Link>\n                <Link to=\"/project\">Project</Link>\n                <Link to=\"/contact\">Contact</Link>\n            </Navigation>\n          </Header>\n          <Drawer title=\"Title\">\n              <Navigation>\n                  <Link to=\"/resume\">Resume</Link>\n                  <Link to=\"/aboutme\">AboutMe</Link>\n                  <Link to=\"/project\">Project</Link>\n                  <Link to=\"/contact\">Contact</Link>\n              </Navigation>\n          </Drawer>\n          <Content>\n              <div className=\"page-content\" />\n              <Main/>\n          </Content>\n          </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import registerServiceWorker from './registerServiceWorker';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n\t<BrowserRouter>\n<App />\n\t</BrowserRouter>\n\t, document.getElementById('root'));\n"],"sourceRoot":""}