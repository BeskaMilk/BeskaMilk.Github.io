{"version":3,"sources":["components/landingpage.js","components/register.js","components/contact.js","components/logIn.js","components/aboutUs.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Landing","react_default","a","createElement","style","width","margin","lib","className","col","tablet","src","alt","phone","Component","Register","Contact","LogIn","AboutUs","Main","react_router","exact","path","component","LandingPage","App","title","scroll","react_router_dom","to","main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"0MAgCeA,mLA3Bb,OACCC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,MAAO,OAAQC,OAAQ,SAChCL,EAAAC,EAAAC,cAACI,EAAA,KAAD,CAAMC,UAAU,gBACZP,EAAAC,EAAAC,cAACI,EAAA,KAAD,CAAME,IAAK,EAAGC,OAAQ,GACrBT,EAAAC,EAAAC,cAAA,OACCQ,IAAI,gKACJC,IAAI,gBACJJ,UAAU,iBAEVP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,eACdP,EAAAC,EAAAC,cAAA,4BAEDF,EAAAC,EAAAC,cAAA,WAGAF,EAAAC,EAAAC,cAAA,gEAIFF,EAAAC,EAAAC,cAACI,EAAA,KAAD,CAAME,IAAK,EAAGC,OAAQ,GAAtB,gBACAT,EAAAC,EAAAC,cAACI,EAAA,KAAD,CAAME,IAAK,EAAGI,MAAO,GAArB,wBAtBWC,aCOPC,mLANb,OACCd,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,4GAHeW,aCQRE,mLANb,OACCf,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,kCAHcW,aCQPG,mLANb,OACChB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,6CAHYW,aCQLI,mLANb,OACCjB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,wDAHcW,aCoBPK,EAVF,kBACZlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACCnB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAO,IAAIC,UAAaC,IACrCvB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOE,KAAO,YAAYC,UAAaR,IACvCd,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOE,KAAO,WAAWC,UAAaP,IACtCf,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOE,KAAO,SAASC,UAAaN,IACpChB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOE,KAAO,WAAWC,UAAaL,cCWzBO,mLArBX,OACExB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,oBACXP,EAAAC,EAAAC,cAACI,EAAA,OAAD,KACAN,EAAAC,EAAAC,cAACI,EAAA,OAAD,CAAQC,UAAU,eAAekB,MAAM,mBAAmBC,QAAM,GAC9D1B,EAAAC,EAAAC,cAACI,EAAA,WAAD,KACIN,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAMC,GAAG,YAAT,YACA5B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAMC,GAAG,aAAT,YACA5B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAMC,GAAG,UAAT,UACA5B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAMC,GAAG,YAAT,aAGN5B,EAAAC,EAAAC,cAACI,EAAA,QAAD,KACIN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,iBACfP,EAAAC,EAAAC,cAAC2B,EAAD,gBAfIhB,aCMEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,yECNNC,IAASC,OACRpC,EAAAC,EAAAC,cAACyB,EAAA,EAAD,KACD3B,EAAAC,EAAAC,cAACmC,EAAD,OAEGC,SAASC,eAAe","file":"static/js/main.81bedf42.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Grid, Cell } from 'react-mdl';\r\n\r\nclass Landing extends Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div style={{width: '100%', margin: 'auto'}}>\r\n\t\t\t    <Grid className=\"landing-grid\">\r\n\t\t\t        <Cell col={6} tablet={8}>\r\n\t\t\t        \t<img\r\n\t\t\t        \t\tsrc=\"https://previews.123rf.com/images/belyay/belyay1803/belyay180300016/97518505-linden-and-ash-wood-texture-a-fragment-of-a-wooden-panel-hardwood-zebra-wood.jpg\"\r\n\t\t\t        \t\talt=\"wooden pannel\"\r\n\t\t\t        \t\tclassName=\"material-img\"\r\n\t\t\t        \t></img>\r\n\t\t\t\t\t        <div className=\"banner-text\">\r\n\t\t\t\t\t        \t<h6> Wooden Pannel</h6>\r\n\r\n\t\t\t\t\t        <hr>\r\n\t\t\t\t\t        </hr>\r\n\r\n\t\t\t\t\t        <p>HTML/CSS | Bootstrap | JavaScript | React etc... </p>\r\n\t\t\t\t\t        </div>\r\n\r\n\t\t\t        </Cell>\r\n\t\t\t        <Cell col={4} tablet={6}>4 (6 tablet)</Cell>\r\n\t\t\t        <Cell col={2} phone={4}>2 (4 phone)</Cell>\r\n\t\t\t    </Grid>\r\n\t\t    </div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Landing;","import React, { Component } from 'react';\r\n\r\nclass Register extends Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div><h1>Please register to start. If you are a partner of a design company, please contact us.</h1></div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Register;","import React, { Component } from 'react';\r\n\r\nclass Contact extends Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div><h1>Contact Page</h1></div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Contact;","import React, { Component } from 'react';\r\n\r\nclass LogIn extends Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div><h1>Please log in to start.</h1></div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default LogIn;","import React, { Component } from 'react';\r\n\r\nclass AboutUs extends Component{\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div><h1>Matters is a networking community.</h1></div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default AboutUs;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport LandingPage from './landingpage';\r\nimport Register from './register';\r\nimport Contact from './contact';\r\nimport LogIn from './logIn';\r\nimport AboutUs from './aboutUs';\r\n\r\n\r\n\r\n\r\nconst Main = () => (\r\n\t<Switch>\r\n\t <Route exact path = \"/\" component = {LandingPage} />\r\n\t <Route path = \"/register\" component = {Register} />\r\n\t <Route path = \"/contact\" component = {Contact} />\r\n\t <Route path = \"/LogIn\" component = {LogIn} />\r\n\t <Route path = \"/aboutUs\" component = {AboutUs} />\r\n\t</Switch>\r\n)\r\n\r\nexport default Main;","import React, { Component} from 'react';\nimport './App.css';\nimport { Layout, Header, Navigation, Drawer, Content } from 'react-mdl';\nimport Main from './components/main';\nimport { Link } from 'react-router-dom';\n\nclass App extends Component{\n  render(){\n    return (\n      <div className=\"demo-big-content\">\n          <Layout>\n          <Header className=\"header-color\" title=\"Material Matters\" scroll>\n            <Navigation>\n                <Link to=\"/aboutUs\">About Us</Link>\n                <Link to=\"/register\">Register</Link>\n                <Link to=\"/logIn\">Log in</Link>\n                <Link to=\"/contact\">Contact</Link>\n            </Navigation>\n          </Header>\n          <Content>\n              <div className=\"page-content\" />\n              <Main/>\n          </Content>\n          </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import registerServiceWorker from './registerServiceWorker';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n\t<BrowserRouter>\n<App />\n\t</BrowserRouter>\n\t, document.getElementById('root'));\n"],"sourceRoot":""}